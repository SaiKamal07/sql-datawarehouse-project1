-- retrive a list of unique countries from which customers originate 

select distinct country from gold.dim_customers;


-- retrive a list of unique categories , sub categories and products

select distinct category,
subcategory,
product_name
from gold.dim_products;

-- DATE Exploration- determine the first and last order date and the total duration in months.

select 
MIN(order_date) as first_order_date,
MAX(order_date) as last_order_date,
DATEDIFF(month,min(order_date),max(order_date)) as order_range_months
from gold.fact_sales;


-- find the youngest and oldest customer based on birthdate 
select
min(birthdate) as oldest_birthdate,
datediff(year,min(birthdate),getdate()) as oldest_Age,
max(birthdate) as youngest_birthdate,
datediff(year,max(birthdate), getdate()) as youngest_Age      -- for checking which is in in which table == see data model image
from gold.dim_customers;


use datawarehouse1;
-- find the Totalsales

select sum(sales_amount) as Total_Sales
from gold.fact_sales;

-- find how many items are sold

select sum(quantity) as total_quantity 
from gold.fact_sales;

-- find the average  selling price
 
select avg(price) as avg_price
from gold.fact_sales;

-- find the total no of customers

select count(distinct(customer_key)) as Total_customers
from gold.dim_customers;

-- find the total products
select count(distinct(product_name)) as Total_products
from gold.dim_products;


-- find the total no of customers that has places an order

select count(distinct customer_key) as total_customers 
from gold.fact_sales

-- find the total no of orders

select count(order_number) as total_orders
from gold.fact_sales;
select count(distinct order_number) as total_orders 
from gold.fact_sales;



-- generate a report which shows KPI's of business

select 'Total_Sales' as measure_name , sum(sales_amount) as measure_value from gold.fact_sales
union all
select 'total_quantity' as measure_name ,sum(quantity) as measure_value from gold.fact_sales
union all
select 'avg_price' as measure_name, avg(price) as measure_value from gold.fact_sales
union all
select 'Total_orders' as measure_name ,count(distinct order_number) from gold.fact_sales
union all 
select 'Total_products' as measure_name,count(distinct product_name) from gold.dim_products
union all
select 'Total_customers' as measure_name,count(distinct customer_key) from gold.dim_customers



--Magnitutde analaysis
--find the total customers by countries
-- Find total customers by countries
SELECT
    country,
    COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC;

-- Find total customers by gender
SELECT
    gender,
    COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC;

-- Find total products by category
SELECT
    category,
    COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

-- What is the average costs in each category?
SELECT
    category,
    AVG(cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC;

-- What is the total revenue generated for each category?
SELECT
    p.category,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.category
ORDER BY total_revenue DESC;


-- What is the total revenue generated by each customer?
SELECT
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;

-- What is the distribution of sold items across countries?
SELECT
    c.country,
    SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC;



-- RANKING ANALASIS


-- Which 5 products Generating the Highest Revenue?
-- Simple Ranking
SELECT TOP 5
    p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC;

-- Complex but Flexibly Ranking Using Window Functions
SELECT *
FROM (
    SELECT
        p.product_name,
        SUM(f.sales_amount) AS total_revenue,
        RANK() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
    FROM gold.fact_sales f
    LEFT JOIN gold.dim_products p
        ON p.product_key = f.product_key
    GROUP BY p.product_name
) AS ranked_products
WHERE rank_products <= 5;

-- What are the 5 worst-performing products in terms of sales?
SELECT TOP 5
    p.product_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_products p
    ON p.product_key = f.product_key
GROUP BY p.product_name
ORDER BY total_revenue;

-- Find the top 10 customers who have generated the highest revenue
SELECT TOP 10
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;

-- The 3 customers with the fewest orders placed
SELECT TOP 3
    c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT order_number) AS total_orders
FROM gold.fact_sales f
LEFT JOIN gold.dim_customers c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_orders ;
